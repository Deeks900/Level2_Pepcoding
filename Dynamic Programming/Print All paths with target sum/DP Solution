#include <bits/stdc++.h>
using namespace std;

class custom{
    public:
    int i; 
    int j;
    vector<int> indices;

    custom(int i, int j, vector<int> indices){
        this->i = i;
        this->j = j;
        this->indices = indices;
    }
};

void printTargetSum(int n, int* arr, int target){
    int** dp = new int*[n+1];
    for(int i = 0; i<=n; i++){
        dp[i] = new int[target+1];
    }

    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= target; j++){
            //0-0 cell
            if(i==0 && j==0){
                dp[i][j] = 1;
            }
            //0th row
            else if(i==0){
                dp[i][j] = 0;
            }
            //0th col
            else if(j == 0){
                dp[i][j] = 1;
            }
            //rest of the cells
            else{
                //if i'm including it
                int ans1;
                if((j-arr[i-1]) >= 0){
                    ans1 = dp[i-1][j-arr[i-1]];
                }
                int ans2 = dp[i-1][j];
                if((j-arr[i-1]) >= 0)
                dp[i][j] = (ans1 || ans2);
                else
                dp[i][j] = ans2;
            }
        }
    }

    dp[n][target]==1 ? cout << "true" : cout << "false";
    cout << endl;

    //Reverse engineering to get path
    queue<custom> pendingVertices;
    vector<int> indices;
    custom c(n, target, indices);
    pendingVertices.push(c);

    while(!pendingVertices.empty()){
        custom temp = pendingVertices.front();
        pendingVertices.pop();
        int i = temp.i;
        int j = temp.j;
        vector<int> psf = temp.indices;

        //if target achieved
        if(i == 0 || j ==0){
            for(int i = psf.size()-1; i >= 0; i--){
                cout << psf[i] << " ";
            }
            cout << endl;
            continue;
        }
        else{
            //Path in which I'm included
            if(((j-arr[i-1])>=0) && (dp[i-1][j-arr[i-1]] == 1)){
                psf.push_back(i-1);
                custom c(i-1, j-arr[i-1], psf);
                pendingVertices.push(c);
                psf.pop_back();
            }
            //Path in which I'm not included
            if(dp[i-1][j] == 1){
                custom c(i-1, j, psf);
                pendingVertices.push(c);
            }
             
            
           
        }
        
    }

}

int main(){
    int n;
    cin >> n;

    int* arr = new int[n];
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }

    int target;
    cin >> target;

    printTargetSum(n, arr, target);
    return 0;
}
