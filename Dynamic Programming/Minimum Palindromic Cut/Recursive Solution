#include<bits/stdc++.h>
using namespace std;
 bool isPalindrome(string s, int start, int end){
        int n = ((end-start)+1);
        bool** dp = new bool*[n];
        for(int i = 0; i < n; i++){
            dp[i] = new bool[n];
        }
        
        for(int gap = 0; gap < n; gap++){
            for(int i = 0, j=gap; j < n; j++, i++){
                if(gap == 0){
                    dp[i][j] = true;
                }
                else if(gap == 1){
                    if(s[i+start] == s[j+start]){
                        dp[i][j] = true;
                    }
                    else{
                        dp[i][j] = false;
                    }
                }
                else{
                    if(s[i+start] == s[j+start]){
                        dp[i][j] = dp[i+1][j-1];
                    }
                    else{
                        dp[i][j] = false;
                    }
                }
            }
        }
        return dp[0][n-1];
    }
    
    int minCut(string s) {
        //Base Case
        if(s.size() == 0){
            return -1;
        }
        
        if(s.size() == 1){
            return 0;
        }
        int n = s.size();
        
        //Recursive Calls
        int finalAns = INT_MAX;
        for(int c = 0; c < n; c++){
            if(isPalindrome(s, 0, c)){
                
                int count = (minCut(s.substr(c+1))+1);
                finalAns = min(finalAns, count);
            }
        }
        return finalAns;
    }
int main(){
    string s;
    cin >> s;
    
    cout << minCut(s);
    return 0;
}
