#include<bits/stdc++.h>
using namespace std;

class custom{
    public:
    int i;
    int j;
    string psf;

    custom(int i, int j, string psf){
        this->i = i;
        this->j = j;
        this->psf = psf;
    }
};

void knapsack(int n, int* values, int* weights, int capacity){
    int** dp = new int*[n+1];
    for(int i = 0; i <= n; i++){
        dp[i] = new int[capacity+1];
    }

    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= capacity; j++){
            //if we are at the first row
            if(i == 0){
                dp[i][j] = 0;
            }
            //if we are at the first column
            else if(j == 0){
                dp[i][j] = 0;
            }
            //rest of the cells
            else{
                if(j >= weights[i-1]){
                    int temp1 = (values[i-1]+dp[i-1][j-weights[i-1]]);
                    int temp2 = dp[i-1][j];
                    dp[i][j] = max(temp1,temp2);
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
    }

    cout << dp[n][capacity] << endl;

    //Now working on printing the path part
    queue<custom> pendingVertices;
        custom c(n, capacity, "");
        pendingVertices.push(c);
    

    while(!pendingVertices.empty()){
        custom front = pendingVertices.front();
        pendingVertices.pop();
        int row = front.i;
        int col = front.j;
        string psf = front.psf;

        // if we have arrived at the destination
        if(row == 0 || col == 0){
            cout << psf << endl;
        }
        else{
            if(dp[row][col] == dp[row-1][col]){
                custom temp(row-1, col, psf);
                pendingVertices.push(temp);
            }
            else{
                custom temp(row-1, col-weights[row-1], to_string(row-1)+" "+psf);
                pendingVertices.push(temp);
            }
        }



        
    }
    

}

int main(){
    int n;
    cin >> n;

    int* values = new int[n];
    for(int i = 0; i < n; i++){
        cin >> values[i];
    }

    int* weights = new int[n];
    for(int i = 0; i < n; i++){
        cin >> weights[i];
    }

    int capacity;
    cin >> capacity;

    knapsack(n, values, weights, capacity);
    return 0;
}
