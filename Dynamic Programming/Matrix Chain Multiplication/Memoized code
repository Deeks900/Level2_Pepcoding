#include<bits/stdc++.h>
using namespace std;

int matrixChain(int n, int* arr, int i, int j, int**mem){
    //Base Case
    if(i >= j){
        return 0;
    }
    
    if((j-i) == 1){
        return 0;
    }
    
  if(mem[i][j] != -1){
      return mem[i][j];
  }
   
    //Recursive Calls
    int finalAns = INT_MAX;
    for(int k = (i+1); k <= (j-1); k++){
        int ansLeft = matrixChain(n, arr, i, k, mem);
        int ansRight = matrixChain(n, arr, k, j, mem);
        int smallCalc = ((arr[i]*arr[j]*arr[k])+ansLeft+ansRight);
        finalAns = min(finalAns, smallCalc);
    }
    
    mem[i][j] = finalAns;
    return mem[i][j];

}

int main(){
    int n;
    cin >> n;
    
    int* arr = new int[n];
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    
    int**mem = new int*[n];
    for(int i = 0; i < n; i++){
        mem[i] = new int[n];
        for(int j = 0; j < n; j++){
            mem[i][j] = -1;
        }
    }
    
    cout << matrixChain(n, arr, 0, n-1, mem);
    return 0;
}
