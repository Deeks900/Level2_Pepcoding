#include<bits/stdc++.h>
using namespace std;

class custom{
    public:
    int i; 
    int j;
    string psf;

    custom(int i, int j, string psf){
        this->i = i;
        this->j = j;
        this->psf = psf;
    }
};

void printPaths(int** matrix, int n, int m){
    int** dp = new int*[n];
    for(int i = 0; i < n; i++){
        dp[i] = new int[m];
    }

    for(int col = (m-1); col >= 0; col--){
        for(int row = (n-1); row >= 0; row--){
            //if we are at the last colum
            if(col == (m-1)){
                dp[row][col] = matrix[row][col];
            }
            //if we are at the last row
            else if(row==(n-1)){
                dp[row][col] = (max(dp[row][col+1], dp[row-1][col+1])+matrix[row][col]);
            }
            //if we are at the first row
            else if(row == 0){
                dp[row][col] = (max(dp[row][col+1], dp[row+1][col+1])+matrix[row][col]);
            }
            //rest of the cells
            else{
                dp[row][col] = (max(max(dp[row][col+1], dp[row+1][col+1]), dp[row-1][col+1])+matrix[row][col]);
            }
        }
    }

    int maxGold = INT_MIN;
    for(int i = 0; i < n; i++){
        maxGold = max(maxGold, dp[i][0]);
    }

    cout << maxGold << endl;

    //Now printing the path
    queue<custom> pendingVertices;
    for(int i = 0; i < n; i++){
        if(dp[i][0] == maxGold){
        custom temp(i, 0, ""+to_string(i)+" ");
        pendingVertices.push(temp);
        }
        
    }
    
    
    while(!pendingVertices.empty()){
        custom front = pendingVertices.front();
        pendingVertices.pop();
        int row = front.i;
        int col = front.j;
        string psf = front.psf;

        //we have reached the right wall
        if(col == (m-1)){
            cout << psf << endl;
        }
        //we are at the last row
        else if(row == (n-1)){
            int maxFinal = max(dp[row][col+1], dp[row-1][col+1]);
            if(dp[row-1][col+1] == maxFinal){
                custom temp(row-1, col+1, psf+"d1 ");
                pendingVertices.push(temp);
            }
            if(dp[row][col+1] == maxFinal){
                custom temp(row, col+1, psf+"d2 ");
                pendingVertices.push(temp);
            }
           
        }
        //we are at the first row
        else if(row == 0){
            int maxFinal = max(dp[row][col+1], dp[row+1][col+1]);
            if(dp[row][col+1] == maxFinal){
                custom temp(row, col+1, psf+"d2 ");
                pendingVertices.push(temp);
            }
            if(dp[row+1][col+1] == maxFinal){
                custom temp(row+1, col+1, psf+"d3 ");
                pendingVertices.push(temp);
            }

        }
        //rest of the cells
        else{
            int cell1 = dp[row][col+1];
            int cell2 = dp[row-1][col+1];
            int cell3 = dp[row+1][col+1];
            int maxAns = max(cell1, max(cell2, cell3));
            if(dp[row-1][col+1] == maxAns){
                custom temp(row-1, col+1, psf+"d1 ");
                pendingVertices.push(temp);
            }
            if(dp[row][col+1] == maxAns){
                custom temp(row, col+1, psf+"d2 ");
                pendingVertices.push(temp);
            }
            
            if(dp[row+1][col+1] == maxAns){
                custom temp(row+1, col+1, psf+"d3 ");
                pendingVertices.push(temp);
            }

        }
    }
}

int main(){
    int n, m;
    cin >> n >> m;

    int** matrix = new int*[n];
    for(int i = 0; i < n; i++){
        matrix[i] = new int[m];
    }

    //Taking input in the array
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> matrix[i][j];
        }
    }

    //calling the function
    printPaths(matrix, n, m);
    return 0;
}
