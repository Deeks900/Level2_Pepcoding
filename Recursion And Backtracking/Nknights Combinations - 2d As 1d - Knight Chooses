#include<bits/stdc++.h>
using namespace std;

bool isKnightSafe(char** chess, int n, int row, int col){
    //First direction
    for(int i = row-1, j = col-2; i>=0 && j>=0; i--,j-=2){
        if(chess[i][j] == 'k'){
            return false;
        }
    }
    
     for(int i = row-2, j = col-1; i>=0 && j>=0; i-=2,j--){
        if(chess[i][j] == 'k'){
            return false;
        }
    }
    
    for(int i = row-2, j = col+1; i>=0 && j<n; i-=2,j++){
        if(chess[i][j] == 'k'){
            return false;
        }
    } 
    
     for(int i = row-1, j = col+2; i>=0 && j<n; i--,j+=2){
        if(chess[i][j] == 'k'){
            return false;
        }
    }
    
    return true;
    
}

void nKnight(char** chess, int n, int count, int lp){
    
    //Base Case
    if(count == n){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cout << chess[i][j] << "\t";
            }
            cout << endl;
        }
        cout << endl;
        return;
    }
    
    //Recursive Calls
    for(int i = lp+1; i < n*n; i++){
        int row  = i/n;
        int col = i%n;
        if(isKnightSafe(chess, n, row, col)){
            chess[row][col] = 'k';
            nKnight(chess, n, count+1, i);
            chess[row][col] = '-';
        }
    }
}
int main(){
    int n;
    cin >> n;
    char** chess = new char*[n];
    for(int i = 0; i < n; i++){
        chess[i] = new char[n];
        for(int j = 0; j < n; j++){
            chess[i][j] = '-';
        }
    }
    
    nKnight(chess, n, 0, -1);
    return 0;
}
